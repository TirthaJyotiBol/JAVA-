Q. Maximum profit in a Stock : Part 1 


->


 @ OPTIMIZED METHOD -       {O(N)-TIME    O(1)-SPACE}

Algorithm:
*While traversing the array once we find the minimum value
*here we first find the minimum value so far and then compare the minimum value with the current value 
*the data is being stored in  profit
*if profit > max_profit then profit is stored at max_profit
*the max_profit is the maximum profit of the stock 


=>code


import java.io.*;

class GFG {
	public static void main (String[] args) {
	int[]a={0,5,2,6,1,4,10,21};
		int max=0;
		int minSofar = a[0];
		for(int i=0;i<a.length;i++)    
		{
		    minSofar = Math.min(minSofar,a[i]);  
		    int profit =a[i]- minSofar;
		    if(profit>max){
		        max=profit;
		    }
		}
		System.out.println(max);
	}
}




@ SOMEWHAT OPTIMIZED:   {O(N)-TIME  O(N)-SPACE}


Algorithm:

* create an auxialary array of same size of a
* put the last element of the array "a" into the auxialary array "aux"
* compare the element a[n-1] with the aux[n] and the greater element is put at the position aux[n-1] : loop is made until it reaches a[0]
 {this is called as preprocessing}
* subtract a[i] with aux[i] and store the value at profit 
* the greatest value among all is the Maximum Value 
 

=> code
class HelloWorld {
    public static void main(String[] args) {
       int[]a= {3,1,4,18,7,2,5};
       int auxArr[]=new int[a.length];                 //created auxialary array
       auxArr[auxArr.length-1]=a[a.length-1];
       
      for(int i=a.length-2;i>=0;i--){
           auxArr[i]=greatest(a[i],auxArr[i+1]);       //put elements in the auxialary array i.e the max value through preprocessing
      }
      
      int maxProfit = 0;
      
      for(int i=0;i<a.length;i++){
          int currentProfit = profit(auxArr[i],a[i]);   // {aux[i]-a[i]} is done 
              if(currentProfit>maxProfit){
                  maxProfit=currentProfit;            // if this profit is greated than the max profit then value is put in max profit
              }
          }
          System.out.println(maxProfit);
      }
      
      
    static int greatest(int a ,int b)              // function for greatest number
    {
        if(a>b){return a;}
        else if(b>a){return b;}
        else{return a;}
    }
    static int profit(int a ,int b)                // function for current-profit
    {
        return a-b;
    }
}







 @ BRUTEFORCE METHOD :   { O(N^2)-TIME  O(1)-SPACE }

algorithm-
    *it checks a[0] with all the elements (0->n-1) and then checks a[1](1->n-1) with all the elements and so on....
    *profit is => ist element - all other element which gives the most number of difference
    *profit is saved into a variable max_profit if profit > max_profit then profit is being stored in max-profit 
    *what is returned is max_profit 

code

=>  
class HelloWorld {
    public static void main(String[] args) {
        int[]a={3,5,0,7,4,19,3};
        int maxProfit = 0;
        for(int i=0;i<a.length;i++){
            int buy = a[i];
            for(int j=i+1;j<a.length;j++){
               int sell = a[j];
                int currentProfit = profit(sell,buy);
                if(currentProfit>maxProfit){
                    maxProfit = currentProfit;
                }
            }
        }
        System.out.println(maxProfit);
        
    }
    static int profit(int a, int b){
        int c = a-b;
        return c;
    }
}
