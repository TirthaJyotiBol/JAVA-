MOORES VOTING ALGORITHM "OR" maximum element in an array "OR" element that repeats n/k times in the array :



@BruteForce Method: space->o(1)  Time->o(n^2)

#Find the frequency of each element and compare freq with maxCount
#if freq > maxcount then the most repeated element is in the index of max count
#if (maxCount>n/2) => print the index of teh element

class mooersAlgorithm {
    public static void main(String[] args) {
     int[]a={1,2,3,2,2,2};
     int maxcount=0;
     int index =0;
     for(int i=0;i<a.length;i++){
         int count =0;
         for(int j=1;j<a.length;j++){
             if(a[i]==a[j]){
                 count++;
             }
             if(count>maxcount){
                 maxcount=count;
                 index = i;
             }
         }
     }
     if(maxcount>(a.length)/2){
         System.out.println("the maximum element is " + a[index]);
     }
     else{
         System.out.println("There is no such element");
     }
    }
}






=>
anuj bhaiya:

package com.tirtha.TryOut;

import java.util.Arrays;

public class intermediateArray {
            public static void main (String[] args) {
                int[]a={1,1,2,3,4,5,1,2,1,1};
                int firstIndex =0;
                int count =1;
                int c=0;
                int k =a.length/2;
                for(int i=1;i<a.length;i++){
                    if(a[firstIndex]==a[i]){
                        count++;
                    }
                    else{
                        count--;
                    }
                    if(count==0) {
                        firstIndex=i;
                        count++;
                    }
                }

                for(int j=0;j<a.length;j++){
                    if(a[firstIndex]==a[j]){
                        c++;
                    }
                }
                if(c>=k){
                    System.out.println("yes it is there and the number is : "+a[firstIndex]+" which is repeated "+ c+" times");
                }
                else System.out.println("no");




    }
            }



